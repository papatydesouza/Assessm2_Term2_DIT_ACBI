/*jshint esversion: 6*/
/***********************************************************
 * Author: Leonard Siu                                     *
 ***********************************************************/

 /**********************************************************************
  * Function: ajaxChangeQuantityBadge(parDifference)                   *
  * Function Description:                                              *
  * Change the value of the quantity badge at shopping cart icon       *
  *--------------------------------------------------------------------*
  * Parameter Description:                                             *
  * 1. parDifference. difference between original quantity and updated *
  *    quantity.                                                       *
  **********************************************************************/
 function ajaxChangeQuantityAndGrandTotal(parProductNumber, parUpdatedQuantity, parDifference, parUnitPrice, parAmount){
   let xmlhttp = new XMLHttpRequest();
   xmlhttp.onreadystatechange = function(){
     if(this.readyState==4 && this.status==200){
       let obj = JSON.parse(this.responseText);
       if(obj["numItemsBought"] > 0)
       {
         document.querySelector('.badge').textContent = obj["numItemsBought"];
       }
       else
       {
         document.querySelector('.badge').style.display = 'none';
       }
       const grandTotals = document.querySelectorAll('.grandTotal');
       for(var index = 0; index < grandTotals.length; index++)
       {
         grandTotals[index].textContent = "Total: "+formatAUD(obj["updatedGrandTotal"]);
       }//for(var index = 0; index < grandTotals.length; index++)
     }//if(this.readyState==4 && this.status==200)
   }//xmlhttp.onreadystatechange = function()
   xmlhttp.open('GET'
               ,'Processes/processChangeInQuantityAndGrandTotal.php?productNumber='+parProductNumber
                                                                    +'&updatedQty='+parUpdatedQuantity
                                                                           +'&diff='+parDifference
                                                                      +'&unitPrice='+parUnitPrice
                                                                      +'&amount='+parAmount
               ,true);
   xmlhttp.send();
 }//function ajaxChangeQuantityBadge(parDifference)

 /*****************************************************************************
 * Function: ajaxGetDataFromServer(parProcessingServerFile, callbackFunction)*
 * Function Description:                                                     *
 * This function returns data from the server. Data will be generated by     *
 *    the instructions specified in the file parProcessingServerFile. Data   *
 *    will then be sent to the callbackFunction for further processing.      *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parProcessingServerFile. contains the file name that has the           *
 *    instructions to fetch data from the database.                          *
 * 2. callbackFunction. Data from the database will be returned to this      *
 *    callback function for further processing.                              *
 *****************************************************************************/
 function ajaxGetDataFromServer(parProcessingServerFile, callbackFunction){
  const xhr = new XMLHttpRequest();
  xhr.onload = function(){   
       callbackFunction(JSON.parse(this.responseText));     
  }//xmlHttp.onreadystatechange = function(){}
  xhr.open('POST', parProcessingServerFile, true);
  xhr.send();
}//function ajaxGetDataFromServer(parProcessingServerFile, callbackFunction)

 /**********************************************************************
  * Function: ajaxRemoveThisCartItem(parProductNumber)                 *
  * Function Description:                                              *
  * This function removes the item from the array orders.              *
  *--------------------------------------------------------------------*
  * Parameter Description:                                             *
  * 1. parProductNumber. Product number to be removed.                 *                                                       *
  **********************************************************************/
 function ajaxRemoveThisCartItem(parProductNumber, parItemCounter){
   let xmlhttp = new XMLHttpRequest();
   xmlhttp.onreadystatechange = function(){
     if(this.readyState==4 && this.status==200){
       if(this.responseText){ //IF responseText is EMPTYCART
         displayMessageEmptyCart(document.querySelector("form")
                                ,document.querySelector(".shoppingCart"));
       }
     }
   }//xmlhttp.onreadystatechange = function()
   xmlhttp.open('GET','Processes/processRemoveOrderItem.php?productNumber='
               +parProductNumber, true);
   xmlhttp.send();
 }//function ajaxRemoveThisCartItem(parProductNumber)

 /**********************************************************************
  * Function: convertDateToYYYYMMDD(parDate)                           *
  * Function Description:                                              *
  * Convert a date of date type to format YYYYMMDD - Date only         *
  *--------------------------------------------------------------------*
  * Parameter Description:                                             *
  * 1. parDate. date of type DATE                                      *
  **********************************************************************/
 function convertDateToYYYYMMDD(parDate){
   const offset = parDate.getTimezoneOffset();
   parDate = new Date(parDate.getTime() - (offset*60*1000));
   return parDate.toISOString().substr(0,10);
 }//function convertDateToYYYYMMDD_Dash(parDate)

 /**********************************************************************
  * Function: convertTimeToHHSS12HOUR(parDate)                         *
  * Function Description:                                              *
  * Convert a date of date type to format HH:SS in 12-hour format      *
  *--------------------------------------------------------------------*
  * Parameter Description:                                             *
  * 1. parDate. date of type DATE                                      *
  **********************************************************************/
 function convertTimeToHHSS12HOUR(parDate){
   const offset = parDate.getTimezoneOffset();
   parDate = new Date(parDate.getTime() - (offset*60*1000));
   return parDate.toISOString().substr(11,5);
 }//function convertTimeToHHSS12HOUR(parDate)

 /*****************************************************************************
  * Function: createCard(parProductDetails)                                   *
  * Function Description:                                                     *
  * This function creates a card                                              *
  *---------------------------------------------------------------------------*
  * Parameter Description:                                                    *
  * 1. parProductDetails. json object containing product details with format: *
  *   {productNumber:"123", productName:"sourdough white", price:7.00        *
  *   , image:"sourdoughWhite.jpg"}                                           *
  *****************************************************************************/
 function createCard(parProductDetails){
   //Create Column
   let attributeList = {class: "col"};
   const thisColumn = createElementWithAttributes("div", attributeList);

   //Create Card
   attributeList = {class: "card"};
   const thisCard = createElementWithAttributes("div", attributeList);

   //Create Card Image top
   attributeList = {class:"card-img-top"
                   ,src:"images/images/"+parProductDetails["image"]
                   ,alt:"Card image cap"
                    };
   const thisImageTop = createElementWithAttributes("img", attributeList);

   //Create Card Body
   attributeList = {class:"card-body text-center"};
   const thisCardBody = createElementWithAttributes("div", attributeList);

   //Create Card Body.Card Title
   attributeList = {class:"card-title"};
   const thisCardTitle = createElementWithAttributes("h5", attributeList);
   thisCardTitle.appendChild(document.createTextNode(parProductDetails["productName"]));
   thisCardBody.appendChild(thisCardTitle);

   //Create Card Body.Card textTitle
   attributeList = {class:"card-text"};
   const thisCardText = createElementWithAttributes("h5", attributeList);
   thisCardText.appendChild(document.createTextNode(formatAUD(parProductDetails["price"])));
   thisCardBody.appendChild(thisCardText);

   //Create Card Body.Form
   attributeList = {action:"Processes/processProductDetails.php",method:"post"};
   const thisForm = createElementWithAttributes("form", attributeList);

   //Create Card Body.Form.Input Product Number
   attributeList = {class:"d-none"
                   ,type:"text"
                   ,"name":"ProductNumber"
                   ,"value":parProductDetails["productNumber"]};
   const thisInputProductNumber = createElementWithAttributes("input"
                                                             ,attributeList);
   thisForm.appendChild(thisInputProductNumber);

   //Create Card Body.Form.Input Submit
   thisForm.appendChild(createSubmitButton("btn btn-primary col-6"
                                          ,"More Details"
                                          ,"VIEWITEM"));
   thisCardBody.appendChild(thisForm);

   //Create the card
   thisCard.appendChild(thisImageTop);
   thisCard.appendChild(thisCardBody);
   thisColumn.appendChild(thisCard);
   return thisColumn;
 }//function createCard(parProductDetails

 /*****************************************************************************
  * Function: createCardForJob(parJobDetails)                                 *
  * Function Description:                                                     *
  * This function creates a card                                              *
  *---------------------------------------------------------------------------*
  * Parameter Description:                                                    *
  * 1. parJobDetails. json object containing product details with format: *
  *   {PostNumber:"1", JobName:"Baker", JobDescription:'baker desc'        *
  *   , Salary:"65000", Negotiable: "Yes", JobStatus:"Full-time"}*
  *****************************************************************************/
  function createCardForJob(parJobDetails){
    //Create Column
    let attributeList = {class: "col"};
    const thisColumn = createElementWithAttributes("div", attributeList);
 
    //Create Card
    attributeList = {class: "card"};
    const thisCard = createElementWithAttributes("div", attributeList);
 
 
    //Create Card Body
    attributeList = {class:"card-body text-center"};
    const thisCardBody = createElementWithAttributes("div", attributeList);
 
    //Create Card Body.Card Title
    attributeList = {class:"card-title"};
    const thisCardTitle = createElementWithAttributes("h5", attributeList);
    thisCardTitle.appendChild(document.createTextNode(parJobDetails["jobName"]));
    thisCardBody.appendChild(thisCardTitle);
 
    //Create Card Body.Card textTitleparJobDetails
    attributeList = {class:"card-text"};
    const thisCardText = createElementWithAttributes("h5", attributeList);
    thisCardText.appendChild(document.createTextNode(formatAUD(parJobDetails["salary"])));
    thisCardBody.appendChild(thisCardText);
 
    //Create Card Body.Form
    //attributeList = {action:"Processes/processJobDetails.php",method:"post"};
    attributeList = {action:"jobDetails.php?postNumber="+parJobDetails["postNumber"],method:"post"};
    const thisForm = createElementWithAttributes("form", attributeList);
 
    //Create Card Body.Form.Input Product Number
    attributeList = {class:"d-none"
                    ,type:"text"
                    ,"name":"postNumber"
                    ,"value":parJobDetails["postNumber"]};
    const thisInputJobNumber = createElementWithAttributes("input"
                                                              ,attributeList);
    thisForm.appendChild(thisInputJobNumber);
 
    //Create Card Body.Form.Input Submit
    thisForm.appendChild(createSubmitButton("btn btn-primary col-6"
                                           ,"More Details"
                                           ,"VIEWITEM"));
    thisCardBody.appendChild(thisForm);
 
    //Create the card
    thisCard.appendChild(thisCardBody);
    thisColumn.appendChild(thisCard);
    return thisColumn;
  }//function createCardForJob(parJobDetails)

 /*****************************************************************************
  * Function: createContainerImage(imageLocation)                             *
  * Function Description:                                                     *
  * This function creates a container image having bootstrap class            *
  * "col-md-6 col-sm-12 p-0"                                                  *
  *---------------------------------------------------------------------------*
  * Parameter Description:                                                    *
  * 1. imageLocation. image location in string format. e.g. "myImage.jpg"     *
  *****************************************************************************/
 function createContainerImage(imageLocation){
   //Create Div
   let attributeList = {class: "col-md-6 col-sm-12 p-0 imageContainer"};
   const containerImage = createElementWithAttributes("div", attributeList);

   //Create Image
   attributeList = {src: imageLocation, class:"w-100", alt:"Image not loaded"};
   const thisImage = createElementWithAttributes("img", attributeList)

   //Append image to div
   containerImage.appendChild(thisImage);

   return containerImage;
 }//function createContainerImage(imageLocation)

 /*****************************************************************************
  * Function: createContainerText(parTextDescription)                         *
  * Function Description:                                                     *
  * This function creates container text with <h3> for title, <p> for text    *
  * description and <a> for button that links to a page.                      *
  *                                                                           *
  * Example Output:                                                           *
  * <h3>Bread making class</h3>                                               *
  * <p>Learn to make a bread</p>                                              *
  * <a href = "breadMakingClass.php", target.....>Go to page</a>              *
  *---------------------------------------------------------------------------*
  * Parameter Description:                                                    *
  * 1. parTextTitle. Element in string format. e.g. "h3"                      *
  * 2. parTextDescription. text in element format such as <p>, <ul>, etc      *
  *    example: {"src": "myImage.jpg", class:"w-100", alt:"Image not loaded"} *
  * 3. parPageLink. link in string format. e.g. "index.php"                   *
  *****************************************************************************/
 function createContainerText(parTextDescription){
   //Create Div
   let attributeList = {class: "col-md-6 col-sm-12 textDescription"};
   const containerText = createElementWithAttributes("div", attributeList);

   for(element in parTextDescription){
     switch (element){
       case "h3":
       case "p":
        containerText.appendChild(
          createElementWithTextNode(element, parTextDescription[element])
        );//containerText.appendChild
       break;
       case "linkButton":
        containerText.appendChild(
          createLinkButton(parTextDescription[element]["hyperlink"]
                         , parTextDescription[element]["buttonClass"]
                         , parTextDescription[element]["buttonText"])
        );//containerText.appendChild
       break;
       case "ul":
       case "ol":
          containerText.appendChild(
            createList(element, parTextDescription[element]));
       break;
       case "input":
         //Create the form
         let attributeList = {action: "Processes/processShoppingCart.php", method: "post"};
         const formJoinClass = createElementWithAttributes("form", attributeList);
         //Create the button
         const submitJoinClass = createElementWithAttributes(element, parTextDescription[element]);
         //Attach the submit button to the form
         formJoinClass.appendChild(submitJoinClass);
         //Attach the form to the container???
         containerText.appendChild(formJoinClass);
     }//switch (element)
   }//for(element in parTextDescription)
   return containerText;
 }//function createContainerText(textTitle, textDescription, pageLink)

 /*****************************************************************************
  * Function: createContainerWithTwoColumns(parFirstElement, parSecondElement)*
  * Function Description:                                                     *
  * This function creates a container with two elements in a single row.      *
  *---------------------------------------------------------------------------*
  * Parameter Description:                                                    *
  * parFirstElement and parSecondElement must be element types.               *
  *****************************************************************************/
 function createContainerWithTwoColumns(parFirstElement, parSecondElement){
   //Create div class="container-fluid"
   let attributeList = {class: "container-fluid"};
   const containerFluid = createElementWithAttributes("div", attributeList);

   //Create div class="row"
   attributeList = {class: "row"};
   const rowContainer = createElementWithAttributes("div", attributeList);

   rowContainer.appendChild(parFirstElement);
   rowContainer.appendChild(parSecondElement);
   containerFluid.appendChild(rowContainer);
   return containerFluid;
 }//function createContainerText(textTitle, textDescription, pageLink)

 /*****************************************************************************
  * Function: createElementWithAttributes(parElement, parAttributeList)       *
  * Function Description:                                                     *
  * This function creates an element with any number of attributes            *
  *---------------------------------------------------------------------------*
  * Parameter Description:                                                    *
  * 1. parElement. Element in string format. e.g. "div"                       *
  * 2. parAttributeList. Attribute(s) in json format without stringifying     *
  *    example: {"src": "myImage.jpg", class:"w-100", alt:"Image not loaded"} *
  *****************************************************************************/
 function createElementWithAttributes(parElement, parAttributeList)
 {
   const thisElement = document.createElement(parElement);

   for(attribute in parAttributeList){
     thisAttribute = document.createAttribute(attribute);
     thisAttribute.value = parAttributeList[attribute];
     thisElement.setAttributeNode(thisAttribute);
   }//for(attribute in parAttributeList)
   return thisElement;
 }//function createElementWithAttributes(parElement, parAttributeList)

 function createElementWithAttributesAndTextNode(parElement, parAttributeList, parTextNode)
 {
   const thisElement = createElementWithAttributes(parElement, parAttributeList);
   const thisTextNode = document.createTextNode(parTextNode);
   thisElement.appendChild(thisTextNode);
   return thisElement;
 }//function createElementWithAttributes(parElement, parAttributeList)

 /*****************************************************************************
  * Function: createElementWithTextNode(parElement, parTextNode)              *
  * Function Description:                                                     *
  * This function creates an element with text node. example: <h1>Hello</h1>  *
  *---------------------------------------------------------------------------*
  * Parameter Description:                                                    *
  * 1. parElement. Element in string format. e.g. "div"                       *
  * 2. parTextNode. Text node in string format. e.g. "Hello"                  *
  *****************************************************************************/
 function createElementWithTextNode(parElement, parTextNode) {
     const thisNewElement = document.createElement(parElement);
     const thisTitleTextNode = document.createTextNode(parTextNode);
     thisNewElement.appendChild(thisTitleTextNode);
     return thisNewElement;
 }//function createElementWithTextNode(parElement, parTextNode)

 function createJobPost(parPostNumber
                      , parJobName
                      , parJobDescription
                      , parSalary
                      , parNegotiable
                      , parJobStatus)
 {
  const pageJobDetails = "JobDetails.php";
  const thisJobPost = createElementWithAttributes("div", {class:"row border p-2 m-2 rounded"});
  const thisJobDataContainer = createElementWithAttributes("div", {class:"jobDataContainer col-md-4"});
  const thisJobNameLink = createElementWithAttributes("a", {href:pageJobDetails.concat("?postNumber="
                                                                                        ,parPostNumber
                                                                                        )
                                                          , target:"_blank"});
  const thisJobName = createElementWithAttributesAndTextNode("h5", {class:"jobName card-title fw-bold"}, parJobName);  
  const thisSalary = createElementWithAttributesAndTextNode("p", {class:"salary"}, "$"+parSalary.toLocaleString());
  const thisSpanNegotiable =  createElementWithAttributesAndTextNode("span", {class:"isNegotiable"}, (parNegotiable==="yes")?" negotiable":""); 
  const thisjobStatus = createElementWithAttributesAndTextNode("p", {class:"jobStatus"}, parJobStatus);
  const thisjobDescriptionContainer = createElementWithAttributes("div", {class:"jobDescriptionContainer col-md-8"});
  
  const thisBriefJobDescriptionTitle = createElementWithAttributesAndTextNode("h5", {class:"card-title"}, "Brief Job Description:");
  const thisBriefJobDescription = createElementWithAttributesAndTextNode("p", {class:"card-text"}, parJobDescription);
  
  thisSalary.appendChild(thisSpanNegotiable);
  thisJobNameLink.appendChild(thisJobName);
  thisJobDataContainer.appendChild(thisJobNameLink);  
  thisJobDataContainer.appendChild(thisSalary); 
  thisJobDataContainer.appendChild(thisjobStatus);
  
  thisjobDescriptionContainer.appendChild(thisBriefJobDescriptionTitle);
  thisjobDescriptionContainer.appendChild(thisBriefJobDescription);

  thisJobPost.appendChild(thisJobDataContainer);
  thisJobPost.appendChild(thisjobDescriptionContainer);
  return thisJobPost;
 }//function createJobPost(parJobName, parJobDescription, parSalary, parNegotiable, parJobStatus)

 /*****************************************************************************
  * Function: createLinkButton(parPageLink, parButtonText)                    *
  * Function Description:                                                     *
  * This function creates a link button example: <a role="button"..>Hello</a> *
  *---------------------------------------------------------------------------*
  * Parameter Description:                                                    *
  * 1. parPageLink. hyperlink in string format. e.g. "index.html"             *
  * 2. parButtonText. button text in string format. e.g. "Go to page"         *
  * 3. parButtonClass. button attributes such as size and style               *
  *****************************************************************************/
function createLinkButton(parPageLink, parButtonClass, parButtonText){
  //Create page link button
  attributeList = {href:parPageLink
                  ,class:parButtonClass
                  ,role:"button"
                  ,"aria-pressed":"false"
                };
  const thisButton = createElementWithAttributes("a", attributeList);
  const thisButtonTextNode = document.createTextNode(parButtonText);
  thisButton.appendChild(thisButtonTextNode);
  return thisButton;
}//function createLinkButton()

/*****************************************************************************
 * Function: createList(listType, listArray)                                 *
 * Function Description:                                                     *
 * This function creates a list with array elements as list items            *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. listType. list type in string format. e.g. "ul" or "ol"                *
 * 2. listArray. array containing list items.                                *
 *****************************************************************************/
function createList(listType, listArray){
  const thisElement = document.createElement(listType);
  listArray.forEach(function(value, index, array){
    thisElement.appendChild(createListItemText(value));
  });
  return thisElement;
}

/*****************************************************************************
* Function: createListItemText(parText)                                     *
* Function Description:                                                     *
* This function creates a list item with text node                          *
*---------------------------------------------------------------------------*
* Parameter Description:                                                    *
* 1. parText. list item in string format. e.g. "Apple"                      *
*****************************************************************************/
function createListItemText(parText)
{
 const listItem = createElementWithTextNode("li", parText);
 return listItem;
}//function createListItemText(parText)

/****************************************************************************
* Function: createMessage(parMessage, parButtonLink)                        *
* Function Description:                                                     *
* This function creates a message with a button that directs the user to    *
* another link.                                                             *
*---------------------------------------------------------------------------*
* Parameter Description:                                                    *
* 1. parMessage. the message text.                                          *
* 2. parButtonLink. the link where user gets directed when button is        *
*    clicked.                                                               *
*****************************************************************************/
function createMessage(parMessage, parButtonLink){
  let attributeList = {class:"message card border-secondary my-4 mx-auto"
                      ,style:"max-width: 18rem;"};
  const thisMessageCard = createElementWithAttributes("div", attributeList);

  attributeList = {class:"card-body text-center"};
  const thisMessageCardBody = createElementWithAttributes("div", attributeList);

  attributeList = {class:"card-title text-secondary"};
  const thisMessageText = createElementWithAttributes("h5", attributeList);
  thisMessageText.appendChild(document.createTextNode(parMessage));

  const thisLinkButton = createLinkButton(parButtonLink
                                         ,"btn btn-outline-secondary mt-3"
                                         ,"Shop Products");

  thisMessageCardBody.appendChild(thisMessageText);
  thisMessageCardBody.appendChild(thisLinkButton);
  thisMessageCard.appendChild(thisMessageCardBody);
  return thisMessageCard;
}//function createMessage()

/*****************************************************************************
* Function: createShoppingCartItem(parProductDetails)                        *
* Function Description:                                                      *
* This function creates a list item with text node                           *
*----------------------------------------------------------------------------*
* Parameter Description:                                                     *
* 1. parProductDetails. json object containing product details with format:  *
*   {productNumber:"123"                                                     *
*  , productName:"sourdough white"                                           *
*  , unitPrice: 7                                                            *
*  , amount:14.00                                                            *
*  , quantityOrdered: 2                                                      *
*  , pickUpDate: "12/01/2021"                                                  *
*  , pickUpTime: "03:30"                                                      *
*   , image:"sourdoughWhite.jpg"                                             *
*   , itemCounter: 0}                                                        *
******************************************************************************/
function createShoppingCartItem(parProductDetails){
  //Create the cart
  let attributeList = {class: "cartItem row border border-light me-1 mb-2"};
  const thisCartItem = createElementWithAttributes("div", attributeList);

  //Create the image container
  attributeList = {class: "col-12 col-md-2 pt-md-2 text-center bg-light"};
  const thisImageContainer = createElementWithAttributes("div", attributeList);

  //Create the image
  attributeList = {class:"img-fluid img-thumbnail"
                  ,src:"images/images/"+parProductDetails["image"]
                  ,alt:"Image not loaded"};
  const thisImage = createElementWithAttributes("img", attributeList);

  //Append the image to image container
  thisImageContainer.appendChild(thisImage);

  //Create pick up container
  attributeList = {class: "col-6 col-md-6 pt-3"};
  const thisPickUpContainer = createElementWithAttributes("div", attributeList);
  thisPickUpContainer.appendChild(createElementWithTextNode("h6", parProductDetails["productName"]));
  thisPickUpContainer.appendChild(createElementWithTextNode("label", "Pick up:"));
  const pickUpDateTime = parProductDetails["pickUpDate"]+" "+parProductDetails["pickUpTime"];
  thisPickUpContainer.appendChild(createElementWithTextNode("p", pickUpDateTime));

  //Create amount container
  attributeList = {class: "col-6 col-md-4 pt-3"};
  const thisAmountContainer = createElementWithAttributes("div", attributeList);

  //Create row container
  attributeList = {class: "row"};
  const thisRowContainer = createElementWithAttributes("div", attributeList);

  //Create price container
  attributeList = {class: "col-5 col-md-4 p-2 priceContainer"};
  const thisPriceContainer = createElementWithAttributes("div", attributeList);
  const thisPrice = createElementWithTextNode("h6", formatAUD(parProductDetails["amount"]));
  thisPrice.setAttribute("class","amount");
  thisPriceContainer.appendChild(thisPrice);

  //Create quantity container
  attributeList = {class: "col-5 col-md-6 quantityContainer"};
  const thisQuantityContainer = createElementWithAttributes("div", attributeList);

  //Create quantity box
  attributeList = {class: "form-control shoppingCartQuantity"
                  ,type:"number"
                  ,min:"1"
                  ,value:parProductDetails["quantityOrdered"]
                  ,name:"fcQuantity"};
  const thisQuantityBox = createElementWithAttributes("input", attributeList);
  thisQuantityContainer.appendChild(thisQuantityBox);

  //Create remove button
  attributeList = {class:"removeButton btn btn-outline-danger btn-sm col-2 col-md-2 pt-md-2 text-center px-0"
                  ,href:"#"
                };
  const thisRemoveButton = createElementWithAttributes("button", attributeList);

  //Create remove button text, which is the 'trash' icon
  attributeList = {class:"far fa-trash-alt"};
  const thisRemoveButtonText = createElementWithAttributes("i", attributeList);
  thisRemoveButton.appendChild(thisRemoveButtonText);

  //Append items to thisRowContainer
  thisRowContainer.appendChild(thisPriceContainer);
  thisRowContainer.appendChild(thisQuantityContainer);
  thisRowContainer.appendChild(thisRemoveButton);

  //Create product number row container
  attributeList = {class:"form-group row rowProductNumber d-none"};
  const thisProductNumberRowContainer = createElementWithAttributes("div", attributeList);

  //Create hidden and read only product number text box
  attributeList = {class:"cartItemProductNumber form-control"
                  ,type:"text"
                  ,value:parProductDetails["productNumber"]
                  ,readonly:""};
  const thisProductNumberRowContainerTextBox = createElementWithAttributes("input", attributeList);

  //Append product number text box to product number row container
  thisProductNumberRowContainer.appendChild(thisProductNumberRowContainerTextBox);

  //Create unit price row container
  attributeList = {class:"form-group row rowUnitPrice d-none"};
  const thisUnitPriceRowContainer = createElementWithAttributes("div", attributeList);

  //Create hidden and read only unit price text box
  attributeList = {class:"cartItemUnitPrice form-control"
                  ,type:"text"
                  // ,name:"unitPrice["+parProductDetails["itemCounter"]+"]"
                  ,value:parProductDetails["unitPrice"]
                  ,readonly:""};
  const thisUnitPriceRowContainerTextBox = createElementWithAttributes("input", attributeList);

  //Append unit price text box to unit price row container
  thisUnitPriceRowContainer.appendChild(thisUnitPriceRowContainerTextBox);

  //BEGIN: Create original quantity ordered box from product details
  attributeList = {class:"form-group row rowQuantityOrdered d-none"};
  const thisQuantityOrderedRowContainer = createElementWithAttributes("div", attributeList);

  //Create hidden and read only original quantity ordered text box
  attributeList = {class:"cartItemQuantityOrdered form-control"
                  ,type:"text"
                  ,value:parProductDetails["quantityOrdered"]
                  ,readonly:""};
  const thisQuantityOrderedRowContainerTextBox = createElementWithAttributes("input", attributeList);

  //Append quantity ordered text box to quantity ordered row container
  thisQuantityOrderedRowContainer.appendChild(thisQuantityOrderedRowContainerTextBox);
  //END: Create quantity ordered box from product details


  //Append items to thisAmountContainer
  thisAmountContainer.appendChild(thisRowContainer);
  thisAmountContainer.appendChild(thisProductNumberRowContainer);
  thisAmountContainer.appendChild(thisUnitPriceRowContainer);
  thisAmountContainer.appendChild(thisQuantityOrderedRowContainer);
  // thisAmountContainer.appendChild(thisItemCounterRowContainer);

  //Append items to thisCartItem
  thisCartItem.appendChild(thisImageContainer);
  thisCartItem.appendChild(thisPickUpContainer);
  thisCartItem.appendChild(thisAmountContainer);
  return thisCartItem;
}//function createShoppingCartItem(parProductDetails)

/*****************************************************************************
* Function: createSubmitButton(parClass, parValue, parName)                 *
* Function Description:                                                     *
* This function creates a list item with text node                          *
*---------------------------------------------------------------------------*
* Parameter Description:                                                    *
* 1. parClass. bootstrap button class                                       *
* 2. parValue. button text, example: "CHECKOUT"                             *
* 3. parName.  name for posting                                             *
*****************************************************************************/
function createSubmitButton(parClass, parValue, parName){
  //Create page link button
  attributeList = {type:"submit"
                  ,class:parClass
                  ,role:"button"
                  ,target:"_blank"
                  ,value:parValue
                  ,name:parName
                };
  return createElementWithAttributes("input", attributeList);
}//function createLinkButton()

function createTableRow(parItemName
  , parUnitPrice
  , parQuantityOrdered
  , parTotalAmount
  , parPickUpDate
  , parPickUpTime)
{
const thisTableRow = document.createElement("tr");
let thisTableData = createElementWithTextNode("td", parItemName);
thisTableRow.appendChild(thisTableData);

thisTableData = createElementWithTextNode("td", formatAUD(parUnitPrice));
thisTableRow.appendChild(thisTableData);

thisTableData = createElementWithTextNode("td", parQuantityOrdered);
thisTableRow.appendChild(thisTableData);

thisTableData = createElementWithTextNode("td", formatAUD(parTotalAmount));
thisTableRow.appendChild(thisTableData);

thisTableData = createElementWithTextNode("td", parPickUpDate);
thisTableRow.appendChild(thisTableData);

thisTableData = createElementWithTextNode("td", parPickUpTime);
thisTableRow.appendChild(thisTableData);

return thisTableRow;
}//function displayRecord

/*****************************************************************************
* Function: displayMessageEmptyCart(parThisForm                              *
*                                  ,parThisShoppingCartContainer)            *
* Function Description:                                                      *
* This function displays empty cart message and makes the form disappear     *
*----------------------------------------------------------------------------*
* Parameter Description:                                                     *
* 1. parThisForm. the form that will disappear                               *
* 2. parThisShoppingCartContainer. the container that will display the       *
*             message.                                                       *
******************************************************************************/
function displayMessageEmptyCart(parThisForm, parThisShoppingCartContainer){
  thisForm.style.display = 'none';
  //thisForm.style.backgroundColor = 'lightblue';
  thisShoppingCartContainer.appendChild(createMessage('Your cart is empty'
                                                    ,'index.php'));
}//function displayMessageEmptyCart(parThisForm, parThisShoppingCartContainer)

function formatAUD(parAmount)
{
  const locale = "en-US";
  const currencyCode = "USD";
  const dollarAU = Intl.NumberFormat(locale, {
    style: "currency"
    ,currency: currencyCode
    });

  return dollarAU.format(parAmount)
}//function formatAUD(parAmount)

//this function converts date time format from
// YYYY-MM-DD HH:MM:SS to DD MMMM YYYY, HH:MM
// Example: 2022-08-10 15:57:00 gives
// 10 August 2022, 3:57 pm
//parDateTimeFormat in YYYY-MM-DD HH:MM:SS
function formatDateTimeOrderSummary(parDateTime){   
  let formattedDateTime = "";  


  formattedDateTime = formatDateDDMMMMYYYY(parDateTime)
                    .concat(", "
                           ,formatTimeHHMM(parDateTime)
                    );

  return formattedDateTime;
}//function formatDateTimeOrderSummary(parDateTime){

function formatDateDDMMMMYYYY(parDateTime)
{
  return new Date(parDateTime)
            .toLocaleDateString('en-AU'
                              , {month:'long'
                              , day: 'numeric'
                              , year:'numeric'}
                              );
  
}//function formatDateDDMMMMYYYY(parDateTime)

function formatTimeHHMM(parDateTime)
{
  return new Date(parDateTime)
  .toLocaleTimeString('en-AU'
                    , {hour:'numeric'
                    , minute: 'numeric'
                      }
                    );
}//function formatTimeHHMM(parDateTime)

function getPostNumberFromURL(parQueryString)
{
  const params = new URLSearchParams(parQueryString);
  let thisPostNumber = 0;

  for(postNumber of params.values())
  {
    thisPostNumber = postNumber;
  }

  return thisPostNumber;
}//function getPostNumberFromURL(parQueryString)


/*****************************************************************************
* Function: removeItemFromCart(parThisElement)                              *
* Function Description:                                                     *
* This function creates a list item with text node                          *
*---------------------------------------------------------------------------*
* Parameter Description:                                                    *
* 1. parThisElement. the current remove button                              *
*****************************************************************************/
function removeItemFromCart(parThisElement){
  const thisCartItem = parThisElement.closest(".cartItem");
  const unitPrice = thisCartItem.querySelector('.cartItemUnitPrice').value;
  const quantityOrdered = thisCartItem.querySelector('.cartItemQuantityOrdered').value;
  //const difference = 0-(thisCartItem.querySelector('.cartItemQuantityOrdered').value);
  const difference = 0 - quantityOrdered;
  const productNumber = thisCartItem.querySelector('.cartItemProductNumber').value;
  const amount = unitPrice * quantityOrdered;

  ajaxChangeQuantityAndGrandTotal(productNumber, quantityOrdered, difference, unitPrice, amount);
  ajaxRemoveThisCartItem(productNumber);
  thisCartItem.remove();

  //update the product number index
  let myItems = document.querySelectorAll(".cartItemProductNumber");
  for(var i=0; i<myItems.length; i++){
    myItems[i].name="productNumber["+i+"]";
  }//for(var i=0; i<myItems.length; i++){
}//function removeItemFromCart(parThisElement)
/***********************************************************
 * Function: getCurrentYear()                              *
 * Description:                                            *
 * This function sets the current year for the footer      *
 ***********************************************************/
function setFooterCurrentYear(){
  document.querySelector(".currentYear").textContent = new Date().getFullYear();
}//function setFooterCurrentYear()

/**********************************************************************
 * Function: setPageTitle(parCurrentPage)                             *
 * Function Description:                                              *
 * This function sets the page title in the title bar                 *
 *--------------------------------------------------------------------*
 * Parameter Description:                                             *
 * 1. parCurrentPage. current page name in string format. e.g. "Home" *
 **********************************************************************/
function setPageTitle(parCurrentPage){
  document.querySelector(".pageTitle").innerHTML = "Luca&apos;s Loaves | "
                                                 + parCurrentPage;
}//function setPageTitle(parCurrentPage)